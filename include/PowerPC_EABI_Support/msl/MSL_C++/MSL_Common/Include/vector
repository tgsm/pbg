#ifndef _MSL_VECTOR
#define _MSL_VECTOR

#include <memory>
#include <null.h>

namespace std {

template <typename T, typename Allocator = allocator<T> >
class __vector_deleter {
public:
    ~__vector_deleter() {}

    void clear();
};

template <typename T, typename Allocator = allocator<T> >
class __vector_pod : public __vector_deleter<T, Allocator> {
public:
    __vector_pod() : m_capacity(0), m_size(0), m_data((T*)NULL) {
    }

    ~__vector_pod() {
        if (m_data != NULL) {
            delete m_data;
        }
    }

    unsigned long size() { return m_size; }
    T* data() { return m_data; }
    void reserve(unsigned long capacity);
    void insert(T* pos, unsigned long count, const T& value);
    // Is this right?
    void push_back(const T& value) { insert(data() + size(), 1, value); }

    // Throw this whole file away bruh
    T* erase(T* position);
    T** erase(T** position);

    T& operator[](unsigned long n) { return *(data() + n); }

public:
    unsigned long m_capacity;
    unsigned long m_size;
    T* m_data;
};

template <typename T, typename Allocator = allocator<T>, bool>
class __vector_imp : public __vector_pod<T, Allocator> {
public:
    void reserve(unsigned long n) { __vector_pod::reserve(n); };
};

template <typename T, typename Allocator = allocator<T> >
class vector : public __vector_imp<T, Allocator, false> {
public:
    unsigned long size() { return __vector_imp::size(); }
    void reserve(unsigned long n) { __vector_imp::reserve(n); }

    T& operator[](unsigned long n) { return __vector_imp::operator[](n); }

    // FIXME: These return iterators
    T** begin() { return (T**)data(); }
    T** end() { return (T**)data() + size(); }
};

}

#endif
