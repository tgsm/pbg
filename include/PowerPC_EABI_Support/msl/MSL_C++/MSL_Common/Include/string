#ifndef _MSL_STRING
#define _MSL_STRING

#include <cstring>
#include <memory>

// HACK for "-bool off"
#if !__option(bool)
#define bool int
#define true 1
#define false 0
#endif

namespace std {

template <typename CharT>
struct char_traits {
    static unsigned long length(const CharT* s) {
        return strlen(s);
    }
    // TODO
};

template <typename CharT, typename Traits = char_traits<CharT>, typename Allocator = allocator<CharT> >
struct basic_string {
    typedef unsigned long size_type;

    explicit basic_string(const Allocator& = Allocator());
    basic_string(const CharT*, const Allocator& = Allocator());
    basic_string(const basic_string&);
    ~basic_string();

    basic_string& assign(const basic_string& other, size_type pos, size_type n = -1);
    basic_string& assign(const CharT* s, size_type count);
    void operator=(const CharT* s) {
        assign(s, strlen(s));
    }

    int compare(size_type pos1, size_type count1, const CharT* s, size_type count2) const;
    int compare(const basic_string& other) const {
        return compare(0, size(), other.begin(), other.size());
    }
    int compare(const CharT* s) {
        return compare(0, size(), s, Traits::length(s));
    }

    bool operator==(const char* s) {
        return compare(s) == 0;
    }
    bool operator!=(const char* s) {
        return compare(s) != 0;
    }
    // FIXME: I think the result of this is being downcast to a u8, when it shouldn't be.
    bool operator==(const basic_string& other) {
        return size() == other.size() && compare(other) == 0;
    }
    bool operator!=(const basic_string& other) {
        return size() != other.size() || compare(other) != 0;
    }

    basic_string& append(const CharT* s, size_type count);
    basic_string& operator+=(const CharT* s) {
        return append(s, strlen(s));
    }

    CharT* begin() const {
        // FIXME: This should return an iterator.
        return *(CharT**)(m_size+3);
    }

    const CharT* data() const;

    const CharT* c_str() const {
        return begin(); // no
    }

    size_type size() const {
        return *m_size;
    }

    int find(const CharT* s, size_type pos, size_type count) const;

    size_type* m_size; // FIXME: not correct

    // TODO
};

typedef basic_string<char> string;

template <typename CharT, typename Traits, typename Allocator>
bool operator==(const basic_string<CharT, Traits, Allocator>& a, const CharT* b) {
    return a.compare(0, a.size(), b, Traits::length(b)) == 0;
}

}

#endif
